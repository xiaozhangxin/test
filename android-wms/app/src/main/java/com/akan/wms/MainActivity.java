package com.akan.wms;import android.app.Activity;import android.content.Intent;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.FrameLayout;import android.widget.RadioButton;import android.widget.RadioGroup;import com.akan.wms.bean.FirstEvent;import com.akan.wms.mvp.activity.ContentActivity;import com.akan.wms.mvp.base.PureActivity;import com.akan.wms.mvp.fragment.Part.PartFragment;import com.akan.wms.mvp.fragment.home.HomeFragment;import com.akan.wms.mvp.fragment.mine.MineFragment;import com.akan.wms.mvp.fragment.part.UpcomFragment;import com.king.base.util.ToastUtils;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import static com.akan.wms.Constants.LOGIN_FRAGMENT;public class MainActivity extends PureActivity {    @BindView(R.id.fragmentContent)    FrameLayout fragmentContent;    @BindView(R.id.rbHome)    RadioButton rbHome;    @BindView(R.id.rbSQ)    RadioButton rbSQ;    @BindView(R.id.rbDD)    RadioButton rbDD;    @BindView(R.id.rbWD)    RadioButton rbWD;    @BindView(R.id.rg)    RadioGroup rg;    private HomeFragment homeFragment;    private MineFragment mineFragment;    private PartFragment partFragment;    private UpcomFragment upcomFragment;    private boolean isExit;    @Override    public int getRootViewId() {        return R.layout.activity_main;    }    @Override    public void initUI() {        showHomeFragment();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // TODO: add setContentView(...) invocation        ButterKnife.bind(this);        EventBus.getDefault().register(this);        makeStatusBarTransparent(this);    }    public static void makeStatusBarTransparent(Activity activity) {        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {            return;        }        Window window = activity.getWindow();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);            int option = window.getDecorView().getSystemUiVisibility() | View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;            window.getDecorView().setSystemUiVisibility(option);            window.setStatusBarColor(Color.TRANSPARENT);        } else {            window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        }    }    @Override    public void onBackPressed() {        //由于推送服务会造成toast关闭不掉，所以去掉再按一次退出        if (!isExit) {            ToastUtils.showToast(context.getApplicationContext(), R.string.press_again_to_exit);            isExit = true;        } else {            super.onBackPressed();        }    }    private void showHomeFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (homeFragment == null) {            homeFragment = HomeFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, homeFragment);        }        commitShowFragment(fragmentTransaction, homeFragment);    }    private void showPartFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (partFragment == null) {            partFragment = PartFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, partFragment);        }        commitShowFragment(fragmentTransaction, partFragment);    }    private void showUpcomFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (upcomFragment == null) {            upcomFragment = UpcomFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, upcomFragment);        }        commitShowFragment(fragmentTransaction, upcomFragment);    }    private void showMineFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mineFragment == null) {            mineFragment = MineFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, mineFragment);        }        commitShowFragment(fragmentTransaction, mineFragment);    }    private void commitShowFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        fragmentTransaction.show(fragment);        fragmentTransaction.commit();    }    private void hideAllFragment(FragmentTransaction fragmentTransaction) {        hideFragment(fragmentTransaction, homeFragment);        hideFragment(fragmentTransaction, upcomFragment);        hideFragment(fragmentTransaction, partFragment);        hideFragment(fragmentTransaction, mineFragment);    }    private void hideFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        if (fragment != null) {            fragmentTransaction.hide(fragment);        }    }    @OnClick({R.id.rbHome, R.id.rbSQ, R.id.rbDD, R.id.rbWD})    public void onViewClicked(View view) {        switch (view.getId()) {            case R.id.rbHome:                showHomeFragment();                break;            case R.id.rbSQ:                showUpcomFragment();                break;            case R.id.rbDD:                showPartFragment();                break;            case R.id.rbWD:                showMineFragment();                break;        }    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onEventMainThread(FirstEvent event) {        switch (event.getMsg()) {            case "3":                finish();                break;            case "homeMessage":                rbDD.setChecked(true);                showPartFragment();                break;            case "homeCode":                rbSQ.setChecked(true);                showUpcomFragment();                break;            case "token_fail":                EventBus.getDefault().post(new FirstEvent("token_fail_two"));                startLogin();                finish();                break;        }    }    protected void startLogin() {        Intent intent = new Intent(MainActivity.this, ContentActivity.class);        intent.putExtra(Constants.KEY_FRAGMENT, LOGIN_FRAGMENT);        startActivity(intent);    }}
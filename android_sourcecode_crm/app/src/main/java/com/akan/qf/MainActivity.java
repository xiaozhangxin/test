package com.akan.qf;import android.Manifest;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.view.View;import android.widget.FrameLayout;import android.widget.RadioGroup;import com.akan.qf.bean.FirstEvent;import com.akan.qf.mvp.activity.ContentActivity;import com.akan.qf.mvp.base.PureActivity;import com.akan.qf.mvp.fragment.home.BookFragment;import com.akan.qf.mvp.fragment.home.HomeFragment;import com.akan.qf.mvp.fragment.home.MessageFragment;import com.akan.qf.mvp.fragment.mine.MineFragment;import com.akan.qf.util.ToastUtil;import com.akan.qf.view.MainRadioButton;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import static com.akan.qf.Constants.LOGIN_FRAGMENT;public class MainActivity extends PureActivity {    @BindView(R.id.fragmentContent)    FrameLayout fragmentContent;    @BindView(R.id.rbHome)    MainRadioButton rbHome;    @BindView(R.id.rbGD)    MainRadioButton rbGD;    @BindView(R.id.rbSC)    MainRadioButton rbSC;    @BindView(R.id.rbMe)    MainRadioButton rbMe;    @BindView(R.id.rg)    RadioGroup rg;    private boolean isExit;    private HomeFragment homeFragment;    private BookFragment bookFragment;    private MessageFragment messageFragment;    private MineFragment mineFragment;    public static boolean isForeground = false;    //for receive customer msg from jpush server    public static final String MESSAGE_RECEIVED_ACTION = "com.akan.qf.MESSAGE_RECEIVED_ACTION";    public static final String KEY_TITLE = "title";    public static final String KEY_MESSAGE = "message";    public static final String KEY_EXTRAS = "extras";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        ButterKnife.bind(this);        EventBus.getDefault().register(this);        if (Build.VERSION.SDK_INT >= 23) {            String[] mPermissionList = new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,                    Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.CALL_PHONE,                    Manifest.permission.READ_LOGS, Manifest.permission.READ_PHONE_STATE,                    Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.SET_DEBUG_APP,                    Manifest.permission.SYSTEM_ALERT_WINDOW, Manifest.permission.GET_ACCOUNTS,                    Manifest.permission.WRITE_APN_SETTINGS};            ActivityCompat.requestPermissions(this, mPermissionList, 123);        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {    }    @Override    protected void onResume() {        isForeground = true;        super.onResume();    }    @Override    protected void onPause() {        isForeground = false;        super.onPause();    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);    }    @Override    public int getRootViewId() {        return R.layout.activity_main;    }    @Override    public void initUI() {        showHomeFragment();    }    //首页    public void showHomeFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (homeFragment == null) {            homeFragment = HomeFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, homeFragment);        }        commitShowFragment(fragmentTransaction, homeFragment);    }    //通讯录    public void showBookFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (bookFragment == null) {            bookFragment = BookFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, bookFragment);        }        commitShowFragment(fragmentTransaction, bookFragment);    }    //消息    public void showMessageFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (messageFragment == null) {            messageFragment = MessageFragment.newInstance("0");            fragmentTransaction.add(R.id.fragmentContent, messageFragment);        }        commitShowFragment(fragmentTransaction, messageFragment);    }    //我的    public void showMineFragment() {        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mineFragment == null) {            mineFragment = MineFragment.newInstance();            fragmentTransaction.add(R.id.fragmentContent, mineFragment);        }        commitShowFragment(fragmentTransaction, mineFragment);    }    public void hideAllFragment(FragmentTransaction fragmentTransaction) {        hideFragment(fragmentTransaction, homeFragment);        hideFragment(fragmentTransaction, bookFragment);        hideFragment(fragmentTransaction, messageFragment);        hideFragment(fragmentTransaction, mineFragment);    }    private void hideFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        if (fragment != null) {            fragmentTransaction.hide(fragment);        }    }    public void commitShowFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        fragmentTransaction.show(fragment);        fragmentTransaction.commit();    }    @OnClick({R.id.rbHome, R.id.rbGD, R.id.rbSC, R.id.rbMe})    public void onViewClicked(View view) {        switch (view.getId()) {            case R.id.rbHome:                showHomeFragment();                break;            case R.id.rbGD:                showBookFragment();                break;            case R.id.rbSC:                showMessageFragment();                break;            case R.id.rbMe:                showMineFragment();                break;        }    }    private int time = 0;    @Subscribe(threadMode = ThreadMode.MAIN)    public void onEventMainThread(FirstEvent event) {        String msg = event.getMsg();        if (msg.contains("exit")) {            finish();        } else if (msg.contains("message")) {            String num = msg.subSequence(7, msg.length()).toString();            if ("0".equals(num)) {                rbSC.setNumberDot(false, "");            } else {                rbSC.setNumberDot(true, num);            }        } else if (msg.equals("expired")) {            if (time <= 0) {                time++;                EventBus.getDefault().post(new FirstEvent("expired_two"));                Intent intent = new Intent(this, ContentActivity.class);                intent.putExtra(Constants.KEY_FRAGMENT, LOGIN_FRAGMENT);                startActivity(intent);                finish();            }        }    }    @Override    public void onBackPressed() {        //由于推送服务会造成toast关闭不掉，所以去掉再按一次退出        if (!isExit) {            ToastUtil.showToast(context.getApplicationContext(), R.string.press_again_to_exit);            isExit = true;        } else {            super.onBackPressed();        }    }}